import Head from "next/head";

import { format, startOfToday, sub } from "date-fns";
const { formatDistance } = require("date-fns");

import React, { useEffect, useState } from "react";
import { LogoutIcon } from "@heroicons/react/outline";
import { AnimatePresence } from "framer-motion";
import { useRouter } from "next/router";
import { API_ENDPOINTS } from "../../constants";
import GoalForm from "../../components/GoalForm";

const imgs = [
  "https://images.unsplash.com/photo-1579880251397-2c3ed174a774?q=80&w=2787&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  "https://images.unsplash.com/photo-1601141256817-c60897f2776a?q=80&w=2787&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  "https://images.unsplash.com/photo-1614152412509-7a5afc18c75b?q=80&w=3027&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
  "https://plus.unsplash.com/premium_photo-1661954372617-15780178eb2e?q=80&w=2920&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
];

function Goals() {
  const [showHabitForm, setShowHabitForm] = useState(false);
  const today = startOfToday();
  const [error, setError] = useState(false);
  const [token, setToken] = useState(null);
  const [goals, setGoals] = useState([]);

  useEffect(() => {
    const token = localStorage && localStorage?.getItem("authToken");
    async function getGoals() {
      const res = await fetch(`${API_ENDPOINTS.BASE_URL}/goals`, {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
      });
      const goals = await res.json();

      setGoals(goals);
    }

    if (token) {
      getGoals();
    }
  }, []);

  useEffect(() => {
    if (typeof window !== "undefined") {
      const token = window.localStorage.getItem("authToken");

      if (!token) {
        window.location.href = "/login";
      }

      setToken(token);
    }
  }, []);

  const dateWhichIsBeforeCurrDate = sub(today, {
    days: 5,
  });

  // use this if needed instead of today! 👆🏽

  const newGoal = {
    name: "",
    description: "",
    createdDate: today,
    deadlineDate: today,
  };

  const router = useRouter();

  const handleCreateHabit = async (goal) => {
    const res = await fetch(`${API_ENDPOINTS.BASE_URL}/goal`, {
      method: "POST",
      body: JSON.stringify({
        goal,
      }),
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
    });
    const newgoal = await res.json();
    console.log(newgoal, "goal given by backend");

    setGoals([...goals, goal]);
    setShowHabitForm(false);
  };

  return (
    <div className="flex h-screen bg-[#F5F5F5] relative overflow-hidden">
      <Head>
        <title>HabitTracker | Habstrack</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/habstrack.svg" />
      </Head>
      <div className=" mx-auto w-full max-w-[90%]  md:max-w-[95%]  2xl:max-w-[70%] flex justify-between py-4 lg:py-8     lg:gap-8   ">
        <main className=" mx-auto w-full max-w-xl lg:max-w-[60%] ">
          <Header setShowHabitForm={setShowHabitForm} />
          <div className=" space-y-4   mt-8 gap-4 pb-5 items-start scrollbar-hide h-[87vh]   overflow-auto ">
            {goals?.map((habit: any, idx) => {
              const result = formatDistance(
                today,
                new Date(habit?.deadlineDate)
              );

              return (
                <div
                  onClick={() => router.push(`goals/${habit._id}`)}
                  key={idx}
                  className={` ${
                    imgs[idx] ? "h-[300px]" : "h-[200px]"
                  } relative  flex bg-white  flex-col justify-between p-6  shadow-sm transition-shadow hover:shadow-lg hover:cursor-pointer group   rounded-2xl  w-full  `}
                >
                  {/* <p className="pb-1">💼</p> */}
                  <div className="z-10">
                    <p className=" font-semibold text-2xl   text-[#272727] capitalize pb-2  ">
                      {" "}
                      {habit.name}
                    </p>
                    <p className=" font-normal text-gray-600 pb-3  max-w-[25rem]   ">
                      {habit.description}
                    </p>
                  </div>

                  <div className="flex z-10  gap-4 items-center">
                    <div>
                      <p
                        className={`text-xs    capitalize    rounded-full    text-gray-600 `}
                      >
                        deadline date
                      </p>
                      <p
                        className={`text-sm py-1    capitalize  font-medium    rounded-full    text-gray-900 `}
                      >
                        {format(new Date(habit.deadlineDate), "MM/dd/yyyy")}
                      </p>
                    </div>
                    <div>
                      <p
                        className={`text-xs    capitalize    rounded-full    text-gray-600 `}
                      >
                        time left
                      </p>
                      <p
                        className={`text-sm py-1    capitalize font-medium    rounded-full    text-gray-900 `}
                      >
                        {result}
                      </p>
                    </div>
                  </div>
                  {imgs[idx] ? (
                    <div
                      style={{
                        backgroundImage: `url(${imgs[idx]})`,
                        backgroundSize: "cover",
                        backgroundPosition: "center",
                        // height: "100vh",
                        // width: "100vw",
                      }}
                      className=" absolute  right-0 top-0 h-[300px] w-[350px]  rounded-r-lg  overflow-hidden  gap-2"
                    >
                      {/* <div className="w-[400px] absolute z-[8] h-[400px] bg-gradient-to-r from-white "></div> */}
                      {/* <Image
                      src={imgs[idx]}
                      width="1000"
                      height="1000"
                      className=" w-full  text-center  "
                      alt="headay's habit tracker img"
                    /> */}
                    </div>
                  ) : null}
                </div>
              );
            })}
          </div>
        </main>
        <AnimatePresence>
          {showHabitForm ? (
            <GoalForm
              formTitle="Add Goal"
              goal={newGoal}
              setShowHabitForm={setShowHabitForm}
              handleSubmit={handleCreateHabit}
              error={error}
            />
          ) : null}
        </AnimatePresence>
      </div>
    </div>
  );
}

export default Goals;

const Header = ({ setShowHabitForm }) => {
  return (
    <div className="flex gap-y-4 justify-between md:items-end">
      <p className="text-3xl font-bold text-[#2e2e2e]">Goals</p>
      <div className="flex justify-between md:justify-normal   items-end gap-3">
        <div className="flex gap-3">
          <button
            onClick={() => setShowHabitForm(true)}
            className={`flex justify-between items-center gap-2 font-medium   bg-[#0F85F2] px-4 py-2.5 rounded-full text-white disabled:cursor-not-allowed`}
          >
            <p>Add Goal</p>
          </button>
          <div>
            <button
              className="p-3 bg-white rounded-full text-gray-600 "
              onClick={() => {
                localStorage.removeItem("authToken");
                window.location.href = "/";
              }}
            >
              <LogoutIcon className=" w-6" />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

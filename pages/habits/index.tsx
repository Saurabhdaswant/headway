import Head from "next/head";
import Layout from "../../components/Layout";
import { HabitsContext } from "../../Providers/HabitsProvider";

import { startOfToday, startOfWeek, sub } from "date-fns";
import { AnimatePresence } from "framer-motion";
import { useContext, useEffect, useState } from "react";
import { colors, weekDays } from "../../components/constants";
import HabitForm from "../../components/HabitForm";
import { HabitsRenderer } from "../../components/HabitsRenderer";
import { API_ENDPOINTS } from "../../constants";
import Header from "../../components/Header";
import WeekDatePicker from "../../components/WeekDatePicker";
import Week from "../../components/Week";
import { cn } from "../../utils/cn";

function App() {
  const { habits, updateHabits }: any = useContext(HabitsContext);
  const [showHabitForm, setShowHabitForm] = useState(false);
  const today = startOfToday();
  const [selectedDay, setSelectedDay] = useState(today);
  const [error, setError] = useState(false);
  const [selectedTimeOfDay, setSelectedTimeOfDay] = useState("anytime");
  const [token, setToken] = useState(null);
  const [viewMode, setViewMode] = useState("list");
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    setIsMounted(true);
    if (typeof window !== "undefined") {
      const token = window.localStorage.getItem("authToken");

      if (!token) {
        window.location.href = "/login";
      }

      setToken(token);

      // Sync viewMode with URL parameter
      const params = new URLSearchParams(window.location.search);
      const mode = params.get("mode");
      if (mode) {
        setViewMode(mode);
      }
    }
  }, []);

  const dateWhichIsBeforeCurrDateForTesting = sub(today, {
    days: 5,
  });
  // use this if needed instead of today! while creating a new habit , so its easy to test features / habits in the future 👆🏽

  const newHabit = {
    name: "",
    why: "",
    hide: false,
    getDoneIn: "anytime",
    color: "",
    completedOnDates: [],
    createdDate: today,
    repeatHabitDays: weekDays,
  };

  const handleCreateHabit = async (habit) => {
    if (habit.name.trim().length === 0) {
      setError(true);
      return;
    } else {
      setError(false);

      if (habit.color === "") {
        const randomColor = colors[Math.floor(Math.random() * colors.length)];
        habit.color = randomColor;
      }

      if (habit.getDoneIn === "") {
        habit.getDoneIn = "anytime";
      }

      const res = await fetch(`${API_ENDPOINTS.BASE_URL}/newHabit`, {
        method: "POST",
        body: JSON.stringify({ habit: habit }),
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
      });
      const habitWithId = await res.json();

      const newHabits = [...(habits || []), habitWithId];

      updateHabits(newHabits);
      setShowHabitForm(false);
    }
  };

  const [currentWeekStart, setCurrentWeekStart] = useState(() => {
    return startOfWeek(new Date(), { weekStartsOn: 1 });
  });

  if (!isMounted) {
    return null; // Prevent rendering until the component is mounted
  }

  return (
    <Layout>
      <div className="w-full md:w-[80%] flex h-screen bg-[#F5F5F5] relative overflow-hidden">
        <Head>
          <title>HabitTracker | Habstrack</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/habstrack.svg" />
        </Head>
        <div
          className={cn(
            " mx-auto w-full  flex justify-between py-4 lg:py-8 lg:gap-8   ",
            viewMode === "calendar" ? "" : "max-w-[90%]  md:max-w-[95%]"
          )}
        >
          <main
            className={cn(
              "mx-auto w-full  max-w-xl ",
              viewMode === "calendar" ? "lg:max-w-[70%]" : "lg:max-w-[60%]"
            )}
          >
            <Header
              selectedDay={selectedDay}
              today={today}
              setShowHabitForm={setShowHabitForm}
              setSelectedDay={setSelectedDay}
              setViewMode={setViewMode}
              viewMode={viewMode}
              currentWeekStart={currentWeekStart}
              setCurrentWeekStart={setCurrentWeekStart}
            />
            {viewMode === "calendar" ? (
              <Week currentWeekStart={currentWeekStart} />
            ) : (
              <>
                <WeekDatePicker
                  selectedDay={selectedDay}
                  setSelectedDay={setSelectedDay}
                />
                <div className=" flex flex-col gap-2 mx-auto  max-w-[400px]  scrollbar-hide h-[70vh]  pb-10   overflow-auto ">
                  <HabitsRenderer
                    habits={habits}
                    selectedDay={selectedDay}
                    selectedTimeOfDay={selectedTimeOfDay}
                  />
                </div>{" "}
              </>
            )}
          </main>
          <AnimatePresence>
            {showHabitForm ? (
              <HabitForm
                formTitle="Add New Habit"
                habit={newHabit}
                setShowHabitForm={setShowHabitForm}
                handleSubmit={handleCreateHabit}
                error={error}
              />
            ) : null}
          </AnimatePresence>
        </div>
      </div>
    </Layout>
  );
}

export default App;
